import socket
import random
import hashlib
import re
from questions import questions

def get_random_questions():
    return random.sample(questions, 5)

def handle_client(conn):
    score = 0
    for question in get_random_questions():
        conn.send(str(question).encode('utf-8'))
        answer = int(conn.recv(1024).decode('utf-8'))
        if answer == question['answer']:
            score += 1
            conn.send('Correcto!'.encode('utf-8'))
        else:
            conn.send('Incorrecto.'.encode('utf-8'))
    conn.send(f'Tu puntuación final es {score}.'.encode('utf-8'))

def login_usuario(conn):
    opcion, email, contrasena = conn.recv(1024).decode().split(',')
    hashed_password = hashlib.sha256(contrasena.encode()).hexdigest()

    if opcion == '1':
        # Aquí deberías implementar la lógica de inicio de sesión
        with open('usuarios.txt', 'r') as f:
            usuarios = f.read().splitlines()
            for usuario in usuarios:
                if usuario == f"{email},{hashed_password}":
                    conn.send("OK".encode())
                    return
            conn.send("Correo electrónico o contraseña incorrectos.".encode())
    elif opcion == '2':
        # Aquí deberías implementar la lógica de registro
        with open('usuarios.txt', 'r') as f:
            usuarios = f.read().splitlines()
            for usuario in usuarios:
                if usuario.split(',')[0] == email:
                    conn.send("El correo electrónico ya está registrado.".encode())
                    return
        with open('usuarios.txt', 'a') as f:
            f.write(f"{email},{hashed_password}\n")
            conn.send("OK".encode())

def iniciar_servidor():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(("", 9999))
    server_socket.listen()

    while True:
        conn, addr = server_socket.accept()
        print(f"Conexión establecida con {addr}")

        # Autenticar al usuario o registrar nuevo usuario
        login_usuario(conn)

        # Recibir apodo del usuario
        nickname = conn.recv(1024).decode()
        print(f"Apodo del usuario: {nickname}")

        # Iniciar el juego
        handle_client(conn)

        print(f"Conexión cerrada con {addr}")
        conn.close()

if __name__ == "__main__":
    iniciar_servidor()
